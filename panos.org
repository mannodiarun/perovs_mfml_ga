#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: panos
#+date: <2023-06-05 Mon>
#+author: Panayotis Manganaris
#+email: panos.manganaris@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 28.2 (Org mode 9.6.5)
#+cite_export:
#+PROPERTY: header-args:jupyter-python :session mfmlga :kernel mfmlga :pandoc org :async yes
#+PROPERTY: header-args :results scalar drawer :eval never-export :exports results
* COMMENT dependencies
** feature extraction
#+begin_src jupyter-python
  %load_ext autoreload
  %autoreload 2
#+end_src

#+RESULTS:
:results:
:end:

#+begin_src jupyter-python
  import sys, os
  sys.path.append(os.path.expanduser("~/src/cmcl"))
#+end_src

#+RESULTS:
:results:
:end:

#+begin_src jupyter-python
  import cmcl
#+end_src

#+RESULTS:
:results:
:end:

** data
#+begin_src jupyter-python
  import pandas as pd
  import numpy as np
#+end_src

#+RESULTS:
:results:
:end:

** plotting
#+begin_src jupyter-python
  import plotly.express as px
  import plotly.io as pio
  import plotly.graph_objects as go

  import re
  from plotly.subplots import make_subplots
  import plotly.figure_factory as ff

  pub_template = go.layout.Template()
  pub_template.data = pio.templates['simple_white'].data
  pub_template.layout = pio.templates['simple_white'].layout
  pub_template.layout.font = dict(family='arial narrow', size=15)

  pio.templates.default = pub_template
#+end_src

#+RESULTS:
:results:
:end:

* load data
#+begin_src jupyter-python
  # ftd = pd.read_excel("./Out_pred_to_plot.xlsx", index_col=0)
#+end_src
 
#+begin_src jupyter-python
  prd = pd.read_excel("./Out_pred_to_plot.xlsx", index_col=0).dropna(axis=1, how='all')
#+end_src

#+RESULTS:
:results:
:end:

* plot binary composition vs bg 
* ternary axis formatting
#+begin_src jupyter-python
  def makeAxis(title, tickangle):
    return dict(
      title= title,
      titlefont=dict(size=20),
      tickangle= tickangle,
      tickfont=dict(size=15),
      tickcolor='rgba(0,0,0,0)',
      ticklen=5,
      showline=True,
      showgrid=True
    )
#+end_src

#+RESULTS:
:results:
:end:

* plot ternary composition vs bg
#+begin_src jupyter-python
  df = prd[prd.Cubic == 1]
#+end_src

#+RESULTS:
:results:
:end:
  
#+begin_src jupyter-python
  X = df.ft.comp()
#+end_src

#+RESULTS:
:results:
:end:

#+begin_src jupyter-python
  comp = X[(X.MA == 1) & (X.Pb == 1)]
  pdf = pd.merge(left=comp.reset_index(), right=df.reset_index(), on='Index')
#+end_src

#+RESULTS:
:results:
:end:

** figure factory
#+begin_src jupyter-python :file ./tern_X-site_TrueContour.png
  p = ff.create_ternary_contour(
      pdf[["Br", "Cl", "I"]].fillna(0).to_numpy().T/3,
      pdf["ML_gap_mean"],
      pole_labels=["Br", "Cl", "I"],
      interp_mode='cartesian',
      showscale=True,
      colorscale='Viridis',
      title = "MAPbX_3 bg vs X-mix"
  )
  # p.update_layout(margin=dict(l=30,r=100,t=70,b=0))
  p.show(renderer='png')
#+end_src

#+RESULTS:
:results:
[[file:./tern_X-site_TrueContour.png]]
:end:

** manual config
#+begin_src jupyter-python :file ./tern_X-site.png
  a="Br"; b="Cl"; c="I"
  title = "MAPbX_3 bg vs X-mix"

  traces = go.Scatterternary(dict(
      a = pdf[a],
      b = pdf[b],
      c = pdf[c],
      mode = 'markers',
      marker=dict(
          symbol='diamond',
          color=pdf['ML_gap_mean'],
          colorscale='Viridis',
          size=17,
          line=dict(
              width=0, 
          ),
          colorbar=dict(
              title='band gap [eV]',
              titleside='right',
              titlefont=dict(size=14),
              len=0.75,
              y=0.5
          ),
      ),
  ))

  layout = dict(
      ternary=dict(
          sum=3,
          aaxis=makeAxis(a, 0),
          baxis=makeAxis('<br>'+b, 45),
          caxis=makeAxis('<br>'+c, -45)
      ),
      coloraxis=dict(showscale=True),
      annotations=(
          dict(
              showarrow=False,
              text=title,
              x=0.5,
              y=1.3,
              font=dict(size=15),
          ),
      )
  )

  p = go.Figure(data=traces, layout=layout)
  p.show(renderer='png')
#+end_src

#+RESULTS:
:results:
[[file:./tern_X-site.png]]
:end:

